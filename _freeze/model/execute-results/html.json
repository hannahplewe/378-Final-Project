{
  "hash": "29d2d85d1f02c4f07e16d59f48e0e98e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Model\"\nformat:\n  html:\n    code-fold: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\nuse_virtualenv(\"~/.virtualenvs/r-reticulate\", required = TRUE)\npy_config()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npython:         C:/Users/C25Hannah.Plewe/OneDrive - afacademy.af.edu/Desktop/Personal/Documents/.virtualenvs/r-reticulate/Scripts/python.exe\nlibpython:      C:/Program Files/Python39/python39.dll\npythonhome:     C:/Users/C25Hannah.Plewe/OneDrive - afacademy.af.edu/Desktop/Personal/Documents/.virtualenvs/r-reticulate\nversion:        3.9.5 (tags/v3.9.5:0a7dcbd, May  3 2021, 17:27:52) [MSC v.1928 64 bit (AMD64)]\nArchitecture:   64bit\nnumpy:          C:/Users/C25Hannah.Plewe/OneDrive - afacademy.af.edu/Desktop/Personal/Documents/.virtualenvs/r-reticulate/Lib/site-packages/numpy\nnumpy_version:  1.26.4\n\nNOTE: Python version was forced by use_python() function\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing\n```\n:::\n\n\n## Get Data\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndf = penguins.load_penguins().dropna()\n\ndf.head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  species     island  bill_length_mm  ...  body_mass_g     sex  year\n0  Adelie  Torgersen            39.1  ...       3750.0    male  2007\n1  Adelie  Torgersen            39.5  ...       3800.0  female  2007\n2  Adelie  Torgersen            40.3  ...       3250.0  female  2007\n\n[3 rows x 8 columns]\n```\n\n\n:::\n:::\n\n\n## Define Model and Fit\n\n\n::: {.cell}\n\n```{.python .cell-code}\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)\n```\n:::\n\n\n## Get some information\n\n\n::: {.cell}\n\n```{.python .cell-code}\nprint(f\"R^2 {model.score(X,y)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR^2 0.8555368759537614\n```\n\n\n:::\n\n```{.python .cell-code}\nprint(f\"Intercept {model.intercept_}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIntercept 2169.269720939398\n```\n\n\n:::\n\n```{.python .cell-code}\nprint(f\"Columns {X.columns}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\n```\n\n\n:::\n\n```{.python .cell-code}\nprint(f\"Coefficients {model.coef_}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]\n```\n\n\n:::\n:::\n\n\n# Lab 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\n\n\n# Install 'vetiver' (don't need to install everytime)\n# py_install(\"vetiver\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom vetiver import VetiverModel\nv = VetiverModel(model, model_name='penguin_model', prototype_data=X)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom vetiver import VetiverAPI\n\n# Create a FastAPI app from the VetiverModel\napp = VetiverAPI(v, check_prototype=True)\n\n```\n:::\n\n\n**Pins**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom pins import board_folder\nfrom vetiver import vetiver_pin_write\n\nb = board_folder('data/model', allow_pickle_read=True)\nvetiver_pin_write(b,v)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nModel Cards provide a framework for transparent, responsible reporting. \n Use the vetiver `.qmd` Quarto template as a place to start, \n with vetiver.model_card()\nWriting pin:\nName: 'penguin_model'\nVersion: 20240424T172015Z-cf3d4\n```\n\n\n:::\n:::\n\n\n**Auto-generate a fastAPI**\n\n\n::: {.cell}\n\n```{.python .cell-code}\napp = VetiverAPI(v, check_prototype=True)\n```\n:::\n\n\n**Port connection http://localhost:8080**\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# COMMENT OUT WHEN YOU NEED TO RENDER\n\n# app.run(port = 8080)\n```\n:::\n\n\n# Lab 6\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport os\nfrom pathlib import Path\n\n# Paths to the files that need to be deleted\napp_file_path = Path('app.py')\ndockerfile_path = Path('Dockerfile')\n\n# Check if app.py exists and delete it\nif app_file_path.exists():\n    app_file_path.unlink()\n\n# Check if Dockerfile exists and delete it\nif dockerfile_path.exists():\n    dockerfile_path.unlink()\n\n# Now run the vetiver function\nfrom vetiver import prepare_docker\nprepare_docker(b, 'penguin_model')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nC:\\Users\\C25HAN~1.PLE\\ONEDRI~1.EDU\\Desktop\\Personal\\DOCUME~1\\VIRTUA~1\\R-RETI~1\\lib\\site-packages\\vetiver\\attach_pkgs.py:77: UserWarning:\n\nrequired packages unknown for board protocol: ('file', 'local'), add to model's metadata to export\n```\n\n\n:::\n:::\n\n\n# Lab 3\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport duckdb\nfrom palmerpenguins import penguins\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport duckdb\nfrom palmerpenguins import penguins\n\ncon = duckdb.connect('my-db.duckdb')\ndf = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()\ndf.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  species     island  bill_length_mm  ...  body_mass_g     sex  year\n0  Adelie  Torgersen            39.1  ...       3750.0    male  2007\n1  Adelie  Torgersen            39.5  ...       3800.0  female  2007\n2  Adelie  Torgersen            40.3  ...       3250.0  female  2007\n4  Adelie  Torgersen            36.7  ...       3450.0  female  2007\n5  Adelie  Torgersen            39.3  ...       3650.0    male  2007\n\n[5 rows x 8 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\ncon.close()\n```\n:::\n\n\n## Extra Information\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "model_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}